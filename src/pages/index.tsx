import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useEffect, ChangeEvent, useRef, useState } from 'react';
import JSZip from 'jszip';
import FileSaver from 'file-saver';
import { JSZipObject } from 'jszip';

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  const [zipFile, setZipFile] = useState<File>();
  const [zipFileContents, setZipFileContents] = useState<ArrayBuffer | string>('');
  const [addFile, setAddFile] = useState<File>();
  const [addFileContents, setAddFileContents] = useState<ArrayBuffer | string>('');
  const [zipFilesResult, setZipFilesResult] = useState<{[key: string]: JSZipObject}>();
  const [actDownload, setActDownload] = useState<number>(0);

  const zipFileRef = useRef<HTMLInputElement>(null);
  const addFileRef = useRef<HTMLInputElement>(null);

  const handleZipChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const zipFile = e.target.files[0];
      setZipFile(zipFile);
      if (zipFile) {
        const reader : FileReader = new FileReader() ;
        reader.onload = function(e) { 
          const metadata = `name: ${zipFile.name}, type: ${zipFile.type}, size: ${zipFile.size}, contents:`;
          const contents = e.target?.result;
          if (contents) setZipFileContents(contents)
        };
        reader.readAsDataURL(zipFile);
      }
    }
  };

  const handleAddChange = (e: ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const addFile = e.target.files[0];
      setAddFile(addFile);
      if (addFile) {
        const reader : FileReader = new FileReader() ;
        reader.onload = function(e) { 
          const metadata = `name: ${addFile.name}, type: ${addFile.type}, size: ${addFile.size}, contents:`;
          const contents = e.target?.result;
          if (contents) setAddFileContents(contents)
        };
        reader.readAsDataURL(addFile);
      }
    }
  };

  const loadFileFromInput = () => {

  }

  const downloadResult = () => {
    setActDownload(1)
  }

  useEffect(() => {
    if (zipFile) {
      const zipper = new JSZip()
      zipper.loadAsync(zipFile).then( async content => {
        //console.log('content', content)
        setZipFilesResult(content.files)
      });
    }
  }, [zipFile]);

  useEffect(() => {
    console.log('zip contents  set: ', typeof zipFileContents, !!zipFileContents)
    if (zipFileContents) {

    }
  }, [zipFileContents])

  useEffect(() => {
    if (!actDownload) return
    if (!zipFilesResult || !addFile) return
    (async () => {
      console.log(' now zip files result is: ', zipFilesResult)
      let returnZip = new JSZip();
      Object.keys(zipFilesResult || []).forEach(key => {
        const fileObj = zipFilesResult ? zipFilesResult[key] : null
        if (!fileObj) return
        console.log('want  to zip: ', key, fileObj.async('string'))
        if (fileObj && fileObj.dir) {
          returnZip.folder(fileObj.name)
        }
        else if (fileObj && !fileObj.dir) {
          returnZip.file(fileObj.name, fileObj.async('string'))
        }
      })
      returnZip.file(addFile?.name || 'addfile.txt', addFile);
      const blobReturnZip = await returnZip.generateAsync({ type: 'blob' });
      console.log('result zip: ', blobReturnZip)
      FileSaver.saveAs(blobReturnZip, "export.zip");
      setActDownload(0)
    })()
  }, [actDownload])

  useEffect(() => {
    console.log('add contents  set: ', typeof addFileContents, addFileContents)
    if (addFileContents) {

    }
  }, [addFileContents])


  return (
    <>
      <Head>
        <title>Contract Editor</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>
            Input zip: &nbsp; 
            <label className={styles.fileLabel} htmlFor="fileZip1">&#x1F4CE; </label>
            { zipFile && <span> {zipFile.name} </span>}
            <input className={styles.fileInput} type="file" id="fileZip1" ref={zipFileRef} onChange={handleZipChange}></input>
          </p>
          <p>
            Input additional file: &nbsp;
            <label className={styles.fileLabel} htmlFor="fileInput2">&#x1F4CE; </label>
            { addFile && <span> {addFile.name} </span>}
            <input className={styles.fileInput} type="file"  ref={addFileRef} id="fileInput2" onChange={handleAddChange}></input>
          </p>
          <p>
            Edit&nbsp;
            <code className = {styles.code}>code sample</code>
          </p>
          {/* <div>
              By{' '}
              <Image
                src="/vercel.svg"
                alt="Vercel Logo"
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
          </div> */}
        </div>
        <div className = {styles.description}>
          {
            zipFilesResult &&
            <>
              <p>
                {Object.keys(zipFilesResult).map(item => <p> {zipFilesResult[item].dir && <span>&#x1F4C1;</span>} {item} </p>)} 
                {
                  addFile &&
                  <p>
                    <span>+</span>
                    <span>{ addFile.name }</span>
                  </p>
                }
              </p>
              {/* <p>
              Input another file
              </p> */}
              {/* <p>
                {' '}
              </p> */}
            </>
          }
        </div>

        <div className={styles.center}>
          <button className = { styles.btnresult} onClick={downloadResult}>Download result</button>
        </div>

        <div className={styles.grid}>
        </div>
      </main>
    </>
  )
}
